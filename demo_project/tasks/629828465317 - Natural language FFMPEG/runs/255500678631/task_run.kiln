{
  "v": 1,
  "id": "255500678631",
  "created_at": "2025-07-24T20:27:09.504139",
  "created_by": "scosman",
  "input": "How can I overlay a timestamp on the top left of every video in a folder, saving the output as mp4?",
  "input_source": {
    "type": "synthetic",
    "properties": {
      "model_name": "gpt_4_1",
      "model_provider": "openrouter",
      "adapter_name": "kiln_data_gen",
      "topic_path": "Batch Processing and Automation"
    }
  },
  "output": {
    "v": 1,
    "id": "135728023689",
    "path": null,
    "created_at": "2025-07-24T20:27:09.504074",
    "created_by": "scosman",
    "output": "To batch overlay a timestamp on the top-left of every video in a folder and save the output as MP4, you can use a shell script combined with ffmpeg's drawtext filter. The drawtext filter can overlay the current timecode or frame time on the video.\n\nKey points:\n- The timestamp will be added based on the video’s timestamp using `pts` (presentation timestamp) converted to a readable time format.\n- Position is set to x=10, y=10 for the top-left corner with some padding.\n- Font size and color can be adjusted for readability (`fontsize=24`, `fontcolor=white` with black box outline).\n- The output format is H.264 video with AAC audio in MP4 containers.\n- We assume you have a compatible font available; the example uses `Arial` — adjust the fontfile path if necessary.\n- The script processes all videos with a specific extension (e.g., `.mp4`, `.mov`) in the directory.\n\nExample Bash script for `.mp4` files:\n\n```bash\n#!/bin/bash\n\n# Directory containing videos\ninput_dir=\"./videos\"\noutput_dir=\"./output\"\n\n# Create output directory if it doesn't exist\nmkdir -p \"$output_dir\"\n\n# Loop over every mp4 file in the input directory\nfor input_file in \"$input_dir\"/*.mp4; do\n  filename=$(basename \"$input_file\")\n  output_file=\"$output_dir/$filename\"\n\n  ffmpeg -i \"$input_file\" -vf \"drawtext=fontfile=/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf: \\\n  text='%{pts\\:hms}': x=10: y=10: fontsize=24: fontcolor=white: box=1: boxcolor=0x00000099\" \\\n  -c:v libx264 -preset fast -crf 23 -c:a aac -b:a 128k -pix_fmt yuv420p -movflags +faststart \\\n  \"$output_file\"\ndone\n```\n\nExplanation:\n- `text='%{pts\\:hms}'`: displays the current timestamp in HH:MM:SS.millisecond format.\n- `box=1: boxcolor=0x00000099`: adds a semi-transparent black box behind the text for better contrast.\n- The script loops over each `.mp4` file, overlays the timestamp, and saves it to the output directory.\n- Encoding settings ensure compatibility and efficient compression.\n- Adjust `fontfile` path if needed to point to a valid TrueType font on your system.\n\nThis approach automates timestamp overlay on a batch of videos, producing MP4 outputs suitable for various uses.",
    "source": {
      "type": "synthetic",
      "properties": {
        "adapter_name": "kiln_openai_compatible_adapter",
        "model_name": "gpt_4_1_mini",
        "model_provider": "openrouter",
        "prompt_id": "simple_prompt_builder",
        "structured_output_mode": "json_schema",
        "temperature": 1.0,
        "top_p": 1.0
      }
    },
    "rating": null,
    "model_type": "task_output"
  },
  "repair_instructions": null,
  "repaired_output": null,
  "intermediate_outputs": {},
  "tags": [
    "synthetic",
    "synthetic_session_732947559261",
    "fine_tune_data"
  ],
  "usage": {
    "input_tokens": 598,
    "output_tokens": 547,
    "total_tokens": 1145,
    "cost": 0.0011144
  },
  "model_type": "task_run"
}