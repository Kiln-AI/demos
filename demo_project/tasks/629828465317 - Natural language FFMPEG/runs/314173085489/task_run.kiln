{
  "v": 1,
  "id": "314173085489",
  "created_at": "2025-07-24T20:24:56.751267",
  "created_by": "scosman",
  "input": "Convert .m4v QuickTime movie to .webm with VP9 video and Vorbis audio for open web usage.",
  "input_source": {
    "type": "synthetic",
    "properties": {
      "model_name": "gpt_4_1",
      "model_provider": "openrouter",
      "adapter_name": "kiln_data_gen",
      "topic_path": "Codec Selection and Adjustment"
    }
  },
  "output": {
    "v": 1,
    "id": "109902267372",
    "path": null,
    "created_at": "2025-07-24T20:24:56.751243",
    "created_by": "scosman",
    "output": "To convert a .m4v QuickTime movie to a .webm file optimized for open web usage with VP9 video codec and Vorbis audio codec:\n\n- Use `-c:v libvpx-vp9` for VP9 video encoding, which provides high compression efficiency and good quality for web.\n- Use `-b:v 0` with `-crf` to enable constant quality mode, which is recommended over constant bitrate for VP9.\n- Use `-crf` value of around 30 as a good quality/size tradeoff (lower means better quality).\n- Use `-c:a libvorbis` for Vorbis audio encoding.\n- Optionally set audio bitrate with `-b:a` (e.g., 128k).\n- Use `-movflags +faststart` is irrelevant for WebM, so omitted.\n- Output file extension should be `.webm`.\n\nAssuming you want decent quality and maintain the original resolution:\n\n```bash\nffmpeg -i input.m4v -c:v libvpx-vp9 -crf 30 -b:v 0 -c:a libvorbis -b:a 128k output.webm\n```",
    "source": {
      "type": "synthetic",
      "properties": {
        "adapter_name": "kiln_openai_compatible_adapter",
        "model_name": "gpt_4_1_mini",
        "model_provider": "openrouter",
        "prompt_id": "simple_prompt_builder",
        "structured_output_mode": "json_schema",
        "temperature": 1.0,
        "top_p": 1.0
      }
    },
    "rating": null,
    "model_type": "task_output"
  },
  "repair_instructions": null,
  "repaired_output": null,
  "intermediate_outputs": {},
  "tags": [
    "synthetic",
    "synthetic_session_732947559261",
    "fine_tune_data"
  ],
  "usage": {
    "input_tokens": 599,
    "output_tokens": 243,
    "total_tokens": 842,
    "cost": 0.0006284
  },
  "model_type": "task_run"
}