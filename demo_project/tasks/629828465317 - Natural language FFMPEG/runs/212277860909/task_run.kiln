{
  "v": 1,
  "id": "212277860909",
  "created_at": "2025-07-24T20:36:34.543869",
  "created_by": "scosman",
  "input": "If a video has non-square pixels, how do I correct its sample aspect ratio when resizing?",
  "input_source": {
    "type": "synthetic",
    "properties": {
      "model_name": "gpt_4_1",
      "model_provider": "openrouter",
      "adapter_name": "kiln_data_gen",
      "topic_path": "Video Resolution and Scaling"
    }
  },
  "output": {
    "v": 1,
    "id": "158126346819",
    "path": null,
    "created_at": "2025-07-24T20:36:34.543841",
    "created_by": "scosman",
    "output": "When a video has non-square pixels, its sample aspect ratio (SAR) differs from 1:1, meaning pixels aren't square. To correctly resize such a video while preserving the intended display aspect ratio (DAR), you need to factor in the SAR during scaling.\n\nThe basic idea is:\n\n- The display aspect ratio (DAR) = (width / height) * SAR.\n- When resizing, if you just scale width and height ignoring SAR, the resized video may appear stretched or squashed.\n- To compensate, scale the width by SAR to get the \"correct\" display width before resizing to desired height (or vice versa).\n\nIn `ffmpeg`, the expression evaluator can read SAR from the video metadata and adjust scaling accordingly. Use the `setsar=1` filter after resizing to reset pixel aspect ratio to 1:1 (square pixels) because the resizing has normalized the aspect ratio.\n\nA common approach is:\n\n1. Scale the video with width and height scaled by SAR as needed to get correct DAR.\n2. Reset SAR to 1.\n\nExample command snippet:\n\n```bash\n-vf \"scale=iw*sar:ih, setsar=1\"\n```\n\nExplanation:\n\n- `iw*sar` scales the width by the sample aspect ratio.\n- `ih` is the input height.\n- `setsar=1` resets pixel aspect ratio to 1:1 after scaling so the pixel aspect ratio metadata does not cause further distortion.\n\nIf you want to resize to a specific height (e.g., 720), keeping the correct aspect ratio including SAR, use:\n\n```bash\n-vf \"scale=trunc(720*dar):720, setsar=1\"\n```\n\nHere, `dar` is the display aspect ratio, which combines SAR and resolution, so height is fixed at 720 and width is calculated accordingly, then SAR is reset.\n\n---\n\n**Example command:**\n\nAssuming your input is `input.mp4`, and you want to resize to height 720 pixels correcting non-square pixels:\n\n```bash\nffmpeg -i input.mp4 -vf \"scale=trunc(720*dar):720, setsar=1\" -c:v libx264 -crf 23 -preset medium -c:a copy output.mp4\n```\n\nThis command:\n\n- Scales the video to 720 pixels high with width adjusted by DAR (which includes SAR).\n- Resets SAR to 1 (square pixels).\n- Uses H.264 encoding with good quality settings.\n- Preserves original audio.\n\nThis method ensures the output videoâ€™s pixels are square, and the display aspect ratio is preserved visually.\n\n---\n\n**Key points:**\n\n- Always reset SAR to 1 after scaling when correcting aspect ratio distortion.\n- Use `dar` in expressions to get the correct width or height based on desired dimension.\n- Use `trunc()` or `round()` to ensure width and height are divisible by 2, required for many codecs.\n\nThis approach corrects non-square pixels smoothly during resizing.",
    "source": {
      "type": "synthetic",
      "properties": {
        "adapter_name": "kiln_openai_compatible_adapter",
        "model_name": "gpt_4_1_mini",
        "model_provider": "openrouter",
        "prompt_id": "simple_prompt_builder",
        "structured_output_mode": "json_schema",
        "temperature": 1.0,
        "top_p": 1.0
      }
    },
    "rating": null,
    "model_type": "task_output"
  },
  "repair_instructions": null,
  "repaired_output": null,
  "intermediate_outputs": {},
  "tags": [
    "synthetic",
    "synthetic_session_732947559261",
    "fine_tune_data"
  ],
  "usage": {
    "input_tokens": 593,
    "output_tokens": 610,
    "total_tokens": 1203,
    "cost": 0.0012132
  },
  "model_type": "task_run"
}