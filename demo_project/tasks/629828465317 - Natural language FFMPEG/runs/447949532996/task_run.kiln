{
  "v": 1,
  "id": "447949532996",
  "created_at": "2025-07-24T18:10:55.064309",
  "created_by": "scosman",
  "input": "How can I stabilize a shaky video footage and keep the file in its original format?",
  "input_source": {
    "type": "synthetic",
    "properties": {
      "model_name": "gpt_4o",
      "model_provider": "openrouter",
      "adapter_name": "kiln_data_gen",
      "topic_path": "Advanced FFmpeg Video Filters"
    }
  },
  "output": {
    "v": 1,
    "id": "173915794940",
    "path": null,
    "created_at": "2025-07-24T18:10:55.064276",
    "created_by": "scosman",
    "output": "To stabilize shaky video footage using FFmpeg, you can use the vidstab plugin, which requires a two-pass process:\n\n1. **Analyze the video to create the stabilization data.**\n2. **Apply the stabilization using that data.**\n\nAssuming your input video is called `input.mp4` and you want to keep the output in the same format (MP4 with the original codecs), hereâ€™s how you do it:\n\n**Step 1: Analyze video for stabilization data**\nThe `vidstabdetect` filter analyzes the motion and generates a file (`transforms.trf`) with the stabilization transformations.\n\n```bash\nffmpeg -i input.mp4 -vf vidstabdetect=shakiness=5:accuracy=15 -f null -\n```\n\n- `shakiness=5` increases sensitivity to rapid camera shakes (default 5, max 10).\n- `accuracy=15` makes the stabilization more precise (default 15).\n\n**Step 2: Apply the stabilization**\nNow, use the `vidstabtransform` filter to stabilize the video using the previously generated `transforms.trf` file:\n\n```bash\nffmpeg -i input.mp4 -vf vidstabtransform=smoothing=30:input=\"transforms.trf\",unsharp=5:5:0.8:3:3:0.4 -c:v libx264 -crf 18 -preset slow -c:a copy output.mp4\n```\n\n- `smoothing=30` increases the smoothing window for a more stable output.\n- `unsharp=5:5:0.8:3:3:0.4` sharpens the stabilized video (optional, but recommended).\n- `-c:v libx264 -crf 18 -preset slow` produces high quality output. If you want to exactly match the original codec, replace these options with `-c:v copy`, but this only works if no filters re-encoding is necessary; stabilization requires re-encoding.\n- `-c:a copy` preserves the original audio stream.\n\n**Assumptions:**\n- The input is an MP4 file with common codecs (H.264 + AAC).\n- You have the `ffmpeg` build with vidstab support.\n\n**Final commands for best practice:**\n\n```bash\nffmpeg -i input.mp4 -vf vidstabdetect=shakiness=5:accuracy=15 -f null -\n\nffmpeg -i input.mp4 -vf vidstabtransform=smoothing=30:input=\"transforms.trf\",unsharp=5:5:0.8:3:3:0.4 -c:v libx264 -crf 18 -preset slow -c:a copy output.mp4\n```\n\nIf your source is not H.264 in MP4, substitute `libx264` and the file extensions to match your original format and codec (e.g., `-c:v libvpx` for VP8/webm, etc.).",
    "source": {
      "type": "synthetic",
      "properties": {
        "adapter_name": "kiln_openai_compatible_adapter",
        "model_name": "gpt_4_1",
        "model_provider": "openrouter",
        "prompt_id": "simple_prompt_builder",
        "structured_output_mode": "json_schema",
        "temperature": 1.0,
        "top_p": 1.0
      }
    },
    "rating": null,
    "model_type": "task_output"
  },
  "repair_instructions": null,
  "repaired_output": null,
  "intermediate_outputs": {},
  "tags": [
    "synthetic",
    "synthetic_session_313121578435",
    "fine_tune_data"
  ],
  "usage": {
    "input_tokens": 592,
    "output_tokens": 609,
    "total_tokens": 1201,
    "cost": 0.006056
  },
  "model_type": "task_run"
}