{
  "v": 1,
  "id": "114031499589",
  "created_at": "2025-07-24T20:25:27.409318",
  "created_by": "scosman",
  "input": "Can ffmpeg copy closed captions from .ts to .mkv? How?",
  "input_source": {
    "type": "synthetic",
    "properties": {
      "model_name": "gpt_4_1",
      "model_provider": "openrouter",
      "adapter_name": "kiln_data_gen",
      "topic_path": "Stream Copying and Remuxing"
    }
  },
  "output": {
    "v": 1,
    "id": "240081016063",
    "path": null,
    "created_at": "2025-07-24T20:25:27.409294",
    "created_by": "scosman",
    "output": "Yes, ffmpeg can copy closed captions (subtitle streams) from a .ts (MPEG Transport Stream) container to an .mkv (Matroska) container without re-encoding by using stream copy mode (`-c copy`).\n\nHere is how it works:\n\n- `.ts` files often carry closed captions as embedded subtitle streams (e.g., DVB subtitles, or CEA-708/608 captions) or as separate subtitle streams.\n- When remuxing from `.ts` to `.mkv`, you want to preserve these subtitle streams without re-encoding.\n- Use `-c copy` to copy all streams (video, audio, and subtitles) without re-encoding.\n- Optionally, you can check the subtitle streams with `ffprobe` beforehand to confirm the stream indexes and codec types.\n- If some subtitle codec is not supported in `.mkv`, you might have to extract or convert them first, but generally Matroska supports a broad range of subtitle codecs.\n\nA basic command copying all streams, including closed captions, looks like this:\n\n```bash\nffmpeg -i input.ts -c copy output.mkv\n```\n\nIf you want to be explicit about copying all subtitles with others, or you want to selectively copy specific streams, you can map them explicitly:\n\n```bash\nffmpeg -i input.ts -map 0 -c copy output.mkv\n```\n\n`-map 0` means copy all streams from the first input.\n\n**Assumptions:**\n\n- The `.ts` file contains closed captions as subtitle streams recognized by ffmpeg.\n- The closed captions' codec is supported in the `.mkv` container.\n- No transcoding is needed, just remuxing streams.\n\nIf the closed captions are embedded as metadata in video frames (like CEA-608/708 directly inside video), additional filtering and extraction steps would be required, but for typical stream copying scenarios, the above is sufficient.\n\n---\n\n```bash\nffmpeg -i input.ts -map 0 -c copy output.mkv\n```",
    "source": {
      "type": "synthetic",
      "properties": {
        "adapter_name": "kiln_openai_compatible_adapter",
        "model_name": "gpt_4_1_mini",
        "model_provider": "openrouter",
        "prompt_id": "simple_prompt_builder",
        "structured_output_mode": "json_schema",
        "temperature": 1.0,
        "top_p": 1.0
      }
    },
    "rating": null,
    "model_type": "task_output"
  },
  "repair_instructions": null,
  "repaired_output": null,
  "intermediate_outputs": {},
  "tags": [
    "synthetic",
    "synthetic_session_732947559261",
    "fine_tune_data"
  ],
  "usage": {
    "input_tokens": 593,
    "output_tokens": 417,
    "total_tokens": 1010,
    "cost": 0.0009044
  },
  "model_type": "task_run"
}