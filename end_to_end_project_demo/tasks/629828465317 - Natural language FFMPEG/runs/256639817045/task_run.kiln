{
  "v": 1,
  "id": "256639817045",
  "created_at": "2025-07-24T20:26:08.319453",
  "created_by": "scosman",
  "input": "Export subtitles as plain text (without timestamps) from input.mkv.",
  "input_source": {
    "type": "synthetic",
    "properties": {
      "model_name": "gpt_4_1",
      "model_provider": "openrouter",
      "adapter_name": "kiln_data_gen",
      "topic_path": "Subtitles Handling"
    }
  },
  "output": {
    "v": 1,
    "id": "148776965313",
    "path": null,
    "created_at": "2025-07-24T20:26:08.319422",
    "created_by": "scosman",
    "output": "To export subtitles as plain text without timestamps from an MKV file, you can extract the subtitle stream and then use a subtitle extractor tool or filter to remove timestamps. ffmpeg can extract subtitle streams but doesn't directly convert subtitles to plain text without timestamps. However, you can first extract the subtitles as a subtitle file (e.g., .srt), then postprocess the file to remove timestamps.\n\nIf you want to do it purely with ffmpeg, you can extract subtitles in SRT format and then use a tool like `sed` or `awk` to remove timestamps and subtitle indexes.\n\nHere’s a typical workflow:\n\n1. Extract subtitle stream in SRT format (assuming the subtitles are in SRT or can be converted):\n```bash\nffmpeg -i input.mkv -map 0:s:0 subs.srt\n```\n2. Remove timestamps and subtitle sequence numbers (using `sed`):\n```bash\nsed '/^[[:digit:]]\\+$/d' subs.srt | sed '/^[[:space:]]*$/d' | sed '/-->/d' > subs.txt\n```\n\nThis removes lines that are only numbers (subtitle sequence), empty lines, and timestamp lines containing “-->”.\n\nIf you want a single command combining extraction and text-only subtitle output with ffmpeg, it's not straightforward. But you can do it with `ffmpeg` and `awk` in a pipeline.\n\nAssumption: The first subtitle stream (0:s:0) corresponds to the subtitles you want.\n\n---\n\n## Explanation of the ffmpeg command\n\n- `-map 0:s:0`: selects the first subtitle stream from the input.\n- Output format is SRT by default (`subs.srt`).\n\nThen cleaning the `.srt` file to a plain text format.\n\n---\n\n### Example commands:\n\n```bash\nffmpeg -i input.mkv -map 0:s:0 subs.srt\n\nsed '/^[[:digit:]]\\+$/d' subs.srt | sed '/^[[:space:]]*$/d' | sed '/-->/d' > subs.txt\n```\n\nAlternatively, a one-liner combining both:\n\n```bash\nffmpeg -i input.mkv -map 0:s:0 -f srt - 2>/dev/null | sed '/^[[:digit:]]\\+$/d' | sed '/-->/d' | sed '/^[[:space:]]*$/d' > subs.txt\n```\n\nThis directly extracts and cleans subtitles to a plain text file without saving the intermediate `.srt`.\n\n---\n\nThis method yields a clean, plain text version of subtitles devoid of timing metadata or sequence numbers, suitable for reading or further processing.",
    "source": {
      "type": "synthetic",
      "properties": {
        "adapter_name": "kiln_openai_compatible_adapter",
        "model_name": "gpt_4_1_mini",
        "model_provider": "openrouter",
        "prompt_id": "simple_prompt_builder",
        "structured_output_mode": "json_schema",
        "temperature": 1.0,
        "top_p": 1.0
      }
    },
    "rating": null,
    "model_type": "task_output"
  },
  "repair_instructions": null,
  "repaired_output": null,
  "intermediate_outputs": {},
  "tags": [
    "synthetic",
    "synthetic_session_732947559261",
    "fine_tune_data"
  ],
  "usage": {
    "input_tokens": 587,
    "output_tokens": 548,
    "total_tokens": 1135,
    "cost": 0.0011116
  },
  "model_type": "task_run"
}