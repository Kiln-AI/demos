{
  "v": 1,
  "id": "246380231705",
  "created_at": "2025-07-24T20:36:03.368499",
  "created_by": "scosman",
  "input": "How do I generate several resolution outputs (360p, 480p, 720p) from a single MP4 source?",
  "input_source": {
    "type": "synthetic",
    "properties": {
      "model_name": "gpt_4_1",
      "model_provider": "openrouter",
      "adapter_name": "kiln_data_gen",
      "topic_path": "Video Resolution and Scaling"
    }
  },
  "output": {
    "v": 1,
    "id": "204329641914",
    "path": null,
    "created_at": "2025-07-24T20:36:03.368473",
    "created_by": "scosman",
    "output": "To generate multiple resolution outputs (360p, 480p, 720p) from a single MP4 source in one ffmpeg command, you can use the filter_complex option to create multiple scaled outputs in a single pass, then map and encode them separately. This is more efficient than running multiple encoding commands.\n\nHereâ€™s the approach:\n\n- Use the scale filter with the output resolutions for height 360, 480, and 720. Width is set to -2 to maintain the aspect ratio and ensure width is divisible by 2 for compatibility.\n- Use `-map` to select each output from the filter_complex.\n- Choose appropriate codecs: H.264 for video and AAC for audio.\n- Set proper encoding parameters for quality and compatibility.\n- Use `-preset` and `-crf` for balancing speed and quality.\n- Because audio is shared, we only map audio once to avoid duplicating it unnecessarily.\n\nIf you want separate files for each resolution, name the outputs accordingly.\n\nExample command:\n\n```bash\nffmpeg -i input.mp4 \\\n-filter_complex \\\n\"[0:v]split=3[v360][v480][v720]; \\\n[v360]scale=-2:360[v360out]; \\\n[v480]scale=-2:480[v480out]; \\\n[v720]scale=-2:720[v720out]\" \\\n-map \"[v360out]\" -c:v:0 libx264 -preset fast -crf 23 -pix_fmt yuv420p -c:a aac -b:a 128k -movflags +faststart output_360p.mp4 \\\n-map \"[v480out]\" -c:v:1 libx264 -preset fast -crf 23 -pix_fmt yuv420p -c:a aac -b:a 128k -movflags +faststart output_480p.mp4 \\\n-map \"[v720out]\" -c:v:2 libx264 -preset fast -crf 23 -pix_fmt yuv420p -c:a aac -b:a 128k -movflags +faststart output_720p.mp4\n```\n\nExplanation:\n\n- `[0:v]split=3` splits the input video into 3 streams.\n- Each stream is scaled to the desired height.\n- `-map` assigns each scaled video stream to an output.\n- Each output file has its own video and audio stream.\n- Using `-movflags +faststart` enables streaming optimization.\n\nAssumptions: The input has one video and one audio stream. Audio is re-encoded for each output; if you want to keep audio from the original, you can adjust accordingly.\n\nIf you want all three outputs in a single output file as separate streams, the approach is different. This example creates three separate MP4 files.",
    "source": {
      "type": "synthetic",
      "properties": {
        "adapter_name": "kiln_openai_compatible_adapter",
        "model_name": "gpt_4_1_mini",
        "model_provider": "openrouter",
        "prompt_id": "simple_prompt_builder",
        "structured_output_mode": "json_schema",
        "temperature": 1.0,
        "top_p": 1.0
      }
    },
    "rating": null,
    "model_type": "task_output"
  },
  "repair_instructions": null,
  "repaired_output": null,
  "intermediate_outputs": {},
  "tags": [
    "synthetic",
    "synthetic_session_732947559261",
    "fine_tune_data"
  ],
  "usage": {
    "input_tokens": 600,
    "output_tokens": 572,
    "total_tokens": 1172,
    "cost": 0.0011552
  },
  "model_type": "task_run"
}